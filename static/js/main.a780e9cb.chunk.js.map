{"version":3,"sources":["components/Layout/Header.js","components/Layout/Footer.js","components/Prayers/api.js","components/Prayers/Prayers.js","components/Layout/Layout.js","components/App/App.js","serviceWorker.js","index.js"],"names":["Header","props","classes","root","react_default","a","createElement","AppBar_default","position","Toolbar_default","variant","IconButton_default","className","menuButton","color","aria-label","Menu_default","Typography_default","Footer","usePrayer","API","_useState","useState","_useState2","Object","slicedToArray","data","setData","_fetchPrayerTimes","asyncToGenerator","regenerator_default","mark","_callee","res","wrap","_context","prev","next","fetch","headers","Accept","sent","json","stop","apply","this","arguments","useEffect","fetchPrayerTimes","Prayers","_usePrayer","_usePrayer2","console","log","Fragment","keys","length","map","item","Paper_default","elevation","rounded","style","marginBottom","component","gutterBottom","timings","Maghrib","date","readable","Layout","Layout_Header","components_Prayers_Prayers","Layout_Footer","App","components_Layout_Layout","Boolean","window","location","hostname","match","ReactDOM","render","components_App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yOAwBeA,EAhBA,SAACC,GAAU,IACdC,EAAuB,CAACC,KAAO,QACvC,OACIC,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CAAQG,SAAS,UACbJ,EAAAC,EAAAC,cAACG,EAAAJ,EAAD,CAASK,QAAQ,SACjBN,EAAAC,EAAAC,cAACK,EAAAN,EAAD,CAAYO,UAAWV,EAAQW,WAAYC,MAAM,UAAUC,aAAW,QAClEX,EAAAC,EAAAC,cAACU,EAAAX,EAAD,OAEJD,EAAAC,EAAAC,cAACW,EAAAZ,EAAD,CAAYK,QAAQ,KAAKI,MAAM,WAA/B,wBCRGI,EANA,SAACjB,GACZ,OACIG,EAAAC,EAAAC,cAAA,mFCHKa,EAAY,WACrB,IAAMC,EAAM,2GADeC,EAEHC,mBAAS,IAFNC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAEpBK,EAFoBH,EAAA,GAEdI,EAFcJ,EAAA,YAAAK,IAAA,OAAAA,EAAAJ,OAAAK,EAAA,EAAAL,CAAAM,EAAAzB,EAAA0B,KAG3B,SAAAC,IAAA,IAAAC,EAAAP,EAAA,OAAAI,EAAAzB,EAAA6B,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACsBC,MAAMlB,EAAK,CACzBmB,QAAU,CACNC,OAAS,sBAHrB,cACUP,EADVE,EAAAM,KAAAN,EAAAE,KAAA,EAMuBJ,EAAIS,OAN3B,OAMUhB,EANVS,EAAAM,KAOId,EAAQD,GAPZ,wBAAAS,EAAAQ,SAAAX,OAH2BY,MAAAC,KAAAC,WAe3B,OAHAC,oBAAU,YAZiB,WAAAnB,EAAAgB,MAAAC,KAAAC,WAavBE,IACD,IACI,CAACtB,EAAMC,ICmBHsB,EA7BC,SAAChD,GAAU,IAAAiD,EACC/B,IADDgC,EAAA3B,OAAAC,EAAA,EAAAD,CAAA0B,EAAA,GAChBxB,EADgByB,EAAA,GAAAA,EAAA,GAEvBC,QAAQC,IAAI3B,GAFW,IAIfxB,EAAuB,CAACC,KAAO,QAGvC,OACIC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAiD,SAAA,KACkB,kBAAT5B,GAAqBF,OAAO+B,KAAK7B,GAAM8B,OAC3C9B,EAAKA,KAAK+B,IAAI,SAAAC,GACX,OACItD,EAAAC,EAAAC,cAACqD,EAAAtD,EAAD,CAAOO,UAAWV,EAAQC,KAAMyD,UAAW,EAAGC,SAAO,EAACC,MAAO,CAACC,aAAa,SACvE3D,EAAAC,EAAAC,cAACW,EAAAZ,EAAD,CAAYK,QAAQ,KAAKsD,UAAU,KAAKC,cAAY,GAC/CP,EAAKQ,QAAQC,SAElB/D,EAAAC,EAAAC,cAACW,EAAAZ,EAAD,CAAY2D,UAAU,KACjBN,EAAKU,KAAKC,aAK1B,OCXEC,EAXA,SAACrE,GAEZ,OACIG,EAAAC,EAAAC,cAAAF,EAAAC,EAAAiD,SAAA,KACIlD,EAAAC,EAAAC,cAACiE,EAAD,MACInE,EAAAC,EAAAC,cAACkE,EAAD,MACJpE,EAAAC,EAAAC,cAACmE,EAAD,QCAGC,MARf,WACE,OACEtE,EAAAC,EAAAC,cAAA,OAAKM,UAAU,OACbR,EAAAC,EAAAC,cAACqE,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9E,EAAAC,EAAAC,cAAC6E,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.a780e9cb.chunk.js","sourcesContent":["import React from 'react';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\n\r\nconst Header = (props) => {\r\n    const { classes } = {classes : {root : 'test'}};\r\n    return (\r\n        <AppBar position=\"static\">\r\n            <Toolbar variant=\"dense\">\r\n            <IconButton className={classes.menuButton} color=\"inherit\" aria-label=\"Menu\">\r\n                <MenuIcon />\r\n            </IconButton>\r\n            <Typography variant=\"h6\" color=\"inherit\">\r\n                P A D A C H O N E\r\n            </Typography>\r\n            </Toolbar>\r\n        </AppBar>\r\n    )\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nconst Footer = (props) => {\r\n    return (\r\n        <h5>P A D A C H O N E </h5>\r\n    )\r\n}\r\n\r\nexport default Footer;","import React, { useState, useEffect } from 'react';\r\nexport const usePrayer = () => {\r\n    const API = 'https://api.aladhan.com/v1/calendarByCity?city=Amsterdam&country=Netherlands&method=2&month=05&year=2019';\r\n    const [data, setData] = useState({})\r\n    async function fetchPrayerTimes() {\r\n        const res = await fetch(API, {\r\n            headers : {\r\n                Accept : 'application/json'\r\n            }\r\n        });\r\n        const data = await res.json();\r\n        setData(data);\r\n    }\r\n    useEffect(() => {\r\n        fetchPrayerTimes();\r\n    }, [])\r\n    return [data, setData]\r\n}\r\n","import React from 'react';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport {usePrayer} from './api';\r\n\r\n\r\nconst Prayers = (props) => {\r\n    const [data, setData] = usePrayer();\r\n    console.log(data)\r\n    debugger;\r\n    const { classes } = {classes : {root : 'test'}};\r\n\r\n    \r\n    return (\r\n        <>\r\n        {(typeof data === \"object\" && Object.keys(data).length)\r\n            ?data.data.map(item => {\r\n                return (\r\n                    <Paper className={classes.root} elevation={1} rounded style={{marginBottom:\"10px\" }}>\r\n                        <Typography variant=\"h4\" component=\"h4\" gutterBottom>\r\n                            {item.timings.Maghrib}\r\n                        </Typography>\r\n                        <Typography component=\"p\">\r\n                            {item.date.readable}\r\n                        </Typography>\r\n                    </Paper>\r\n                )\r\n            })\r\n            :null\r\n\r\n        }        \r\n        </>\r\n    )\r\n}\r\n\r\nexport default Prayers;","import React from 'react';\r\nimport Header from './Header';\r\nimport Footer from './Footer';\r\nimport Prayers from '../Prayers';\r\n\r\n\r\nconst Layout = (props) => {\r\n    \r\n    return (\r\n        <>\r\n            <Header />\r\n                <Prayers />\r\n            <Footer />\r\n        </>        \r\n    )\r\n}\r\n\r\nexport default Layout;","import React from 'react';\r\nimport './App.css';\r\nimport Layout from '../Layout'\r\n\r\nfunction App() {  \r\n  return (\r\n    <div className=\"App\">\r\n      <Layout />      \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}