{"version":3,"sources":["components/Layout/Header.js","components/Layout/Footer.js","components/Prayers/api.js","components/Prayers/Prayer.js","components/Prayers/Prayers.js","components/Layout/Layout.js","components/App/App.js","serviceWorker.js","index.js"],"names":["Header","_ref","timezone","react_default","a","createElement","className","flexGrow","AppBar","position","color","style","backgroundColor","Toolbar","Typography","variant","useStyles","makeStyles","root","display","Footer","props","classes","_React$useState","React","useState","_React$useState2","Object","slicedToArray","value","setValue","BottomNavigation","onChange","event","newValue","BottomNavigationAction","label","icon","Favorite_default","LocationOn_default","usePrayer","city","API","_useState","_useState2","data","setData","_fetchPrayerTimes","asyncToGenerator","regenerator_default","mark","_callee","res","wrap","_context","prev","next","fetch","headers","Accept","sent","json","stop","apply","this","arguments","useEffect","fetchPrayerTimes","card","minWidth","bullet","margin","transform","title","fontSize","pos","marginBottom","buttonaction","justifyContent","Prayer","_props$pdata","pdata","timings","date","keys","map","prayer","index","Card","key","CardContent","gutterBottom","component","readable","hijri","month","ar","concat","weekday","en","theme","progress","spacing","secondary","Prayers","_usePrayer","_usePrayer2","prayerdata","code","status","console","log","dt","Date","day","getDate","slice","mon","getMonth","yr","getFullYear","length","Fragment","Prayers_Prayer","CircularProgress","Layout","Layout_Header","components_Prayers_Prayers","Layout_Footer","App","components_Layout_Layout","Boolean","window","location","hostname","match","ReactDOM","render","components_App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.be1d319a.chunk.js","sourcesContent":["import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\n\r\n// const useStyles = makeStyles({\r\n//   root: {\r\n//     flexGrow: 1,\r\n//   },\r\n// });\r\n\r\n\r\n\r\n\r\n\r\nconst Header = ({timezone}) => {\r\n    //const classes = useStyles();\r\n\r\n    return (\r\n        <div className={{flexGrow: 1}}>\r\n        <AppBar position=\"fixed\" color=\"primary\" style={{backgroundColor:'#4caf50'}}>\r\n            <Toolbar>\r\n            <Typography variant=\"h6\" color=\"inherit\">\r\n                {timezone}\r\n            </Typography>\r\n            </Toolbar>\r\n        </AppBar>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport BottomNavigation from '@material-ui/core/BottomNavigation';\r\nimport BottomNavigationAction from '@material-ui/core/BottomNavigationAction';\r\nimport Icon from '@material-ui/core/Icon';\r\nimport RestoreIcon from '@material-ui/icons/Restore';\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\nimport LocationOnIcon from '@material-ui/icons/LocationOn';\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n      display: \"flex\"\r\n    },\r\n  });\r\n\r\nconst Footer = (props) => {\r\n    const classes = useStyles();\r\n    const [value, setValue] = React.useState('recents');\r\n    function handleChange(event, newValue) {\r\n        setValue(newValue);\r\n      }\r\n    return (\r\n        <BottomNavigation value={value} onChange={handleChange} className={classes.root}>\r\n            {/* <BottomNavigationAction label=\"Recents\" value=\"recents\" icon={<RestoreIcon />} /> */}\r\n            <BottomNavigationAction label=\"Favorites\" value=\"favorites\" icon={<FavoriteIcon />} />\r\n            <BottomNavigationAction label=\"Nearby\" value=\"nearby\" icon={<LocationOnIcon />} />\r\n            {/* <BottomNavigationAction label=\"Folder\" value=\"folder\" icon={<Icon>...</Icon>} /> */}\r\n        </BottomNavigation>\r\n    )\r\n}\r\n\r\nexport default Footer;","import React, { useState, useEffect } from 'react';\r\nexport const usePrayer = (city) => {\r\n    const API = `https://api.aladhan.com/v1/timingsByCity?city=Amsterdam&country=Netherlands&method=8`;\r\n    const [data, setData] = useState({})\r\n    async function fetchPrayerTimes() {\r\n        const res = await fetch(API, {\r\n            headers : {\r\n                Accept : 'application/json'\r\n            }\r\n        });\r\n        const data = await res.json();\r\n        setData(data);\r\n    }\r\n    useEffect(() => {\r\n        fetchPrayerTimes();\r\n    }, [])\r\n    return [data, setData]\r\n}\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { EventEmitter } from 'events';\r\n\r\nconst useStyles = makeStyles({\r\n    card: {\r\n      minWidth: 275,\r\n    },\r\n    bullet: {\r\n      display: 'inline-block',\r\n      margin: '0 2px',\r\n      transform: 'scale(0.8)',\r\n    },\r\n    title: {\r\n      fontSize: 14,\r\n    },\r\n    pos: {\r\n      marginBottom: 12,\r\n    },    \r\n    buttonaction: {\r\n        justifyContent: 'center'\r\n    }\r\n  });\r\n\r\nconst Prayer = (props) => {\r\n    const { pdata:{timings, date} } = props;\r\n    const classes = useStyles();\r\n\r\n    \r\n\r\n    \r\n    if (timings) {\r\n        return (\r\n            Object.keys(timings).map((prayer, index) => {\r\n                return (\r\n                    <Card className={classes.card} key={index}>\r\n                        <CardContent>\r\n                            <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\r\n                            {prayer}\r\n                            </Typography>\r\n                            <Typography variant=\"h3\" component=\"h2\">\r\n                            {timings[prayer]}\r\n                            </Typography>\r\n                            <Typography className={classes.pos} color=\"textSecondary\">\r\n                            {date.readable}\r\n                            </Typography>\r\n                            <Typography variant=\"body2\" component=\"p\">\r\n                            {date.hijri.month.ar}\r\n                            <br />\r\n                            {`\"${date.hijri.weekday.en}\"`}\r\n                            </Typography>\r\n                        </CardContent>\r\n                        {/* <CardActions className={classes.buttonaction}>\r\n                            <Button size=\"small\">Learn More</Button>\r\n                        </CardActions> */}\r\n                    </Card> \r\n                )\r\n            })\r\n\r\n            \r\n        )\r\n    }\r\n    else {\r\n        return null\r\n    }\r\n}\r\n\r\nexport default Prayer;","import React, {useEffect} from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport {usePrayer} from './api';\r\nimport Prayer from './Prayer';\r\nimport './prayers.css';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    progress: {\r\n      margin: theme.spacing(2),\r\n    },\r\n    secondary: {\r\n        color:'#4caf50'\r\n    }\r\n  }));\r\n\r\nconst Prayers = (props) => {\r\n    const [data, setData] = usePrayer('Amsterdam');\r\n    const {data:prayerdata, code, status} = data;\r\n    console.log(data)\r\n    debugger;    \r\n    const classes = useStyles();\r\n    // \r\n    const monthList = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\r\n    let dt = new Date();\r\n    let day = ('0'+dt.getDate()).slice(-2);\r\n    let mon = monthList[dt.getMonth()];\r\n    let yr = dt.getFullYear();\r\n    console.log(`${day} ${mon} ${yr}`)\r\n    // \r\n    useEffect(() => {\r\n        if (prayerdata && Object.keys(prayerdata).length) {\r\n            //localStorage.setItem()\r\n        }\r\n        \r\n    })\r\n    \r\n    return (\r\n        <div className=\"pdnContainer\">\r\n        {(typeof data === \"object\" && code === 200 && Object.keys(prayerdata).length)\r\n            ?<>\r\n                <Prayer pdata={prayerdata}/>                           \r\n            </>\r\n            :<CircularProgress className={classes.progress} color=\"secondary\" />\r\n        }        \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Prayers;","import React from 'react';\r\nimport Header from './Header';\r\nimport Footer from './Footer';\r\nimport Prayers from '../Prayers';\r\n\r\n\r\nconst Layout = (props) => {\r\n    \r\n    return (\r\n        <>\r\n            <Header timezone=\"Europe/Amsterdam\"/>\r\n                <Prayers />\r\n            <Footer />\r\n        </>        \r\n    )\r\n}\r\n\r\nexport default Layout;","import React from 'react';\r\nimport './App.css';\r\nimport 'typeface-roboto';\r\nimport Layout from '../Layout';\r\n\r\nfunction App() {  \r\n  return (\r\n    <div className=\"App\">\r\n      <Layout />      \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}